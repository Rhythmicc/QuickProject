#compdef Qpro

local cur prev
cur=${words[CURRENT]}
prev=${words[CURRENT-1]}

(( $+functions[_qpro_args_comp_zh] )) ||
_qpro_args_comp_zh() {
    local -a opt_args
    if [[ ${prev} == scp ]] || [[ ${prev} == smv ]] || [[ ${prev} == get ]] || [[ ${prev} == del ]] || [[ ${prev} == ls ]]; then
        _arguments -S -s '*:filename:_files'
        return
    elif [[ ${prev} == register-global ]]; then
        opt_args=(
            --disable_global_command:'To disable global command'
        )
    elif [[ ${prev} == --disable_global_command ]]; then
        opt_args=(
            1:'Enable global command'
            0:'Disable global command'
        )
    else
        opt_args=()
    fi
    _describe subcommand opt_args
}

(( $+functions[_qpro_main_zh] )) ||
_qpro_main_zh() {
    local -a args
    args=(
        init:'Initial the current directory as Qpro project',
        -h:'help'
        create:'create Qpro project'
        update:'update Qpro'
        ssh:'login server by ssh'
        scp:'upload <path> to default server target'
        smv:'delete <path> after scp'
        scp-init:'upload all of project to server target'
        get:'download <file> from server target'
        del:'delete <path> in project'
        del-all:'delete Qpro project'
        ls:'list element in <path>'
        bin:'Execute global command'
        enable-complete:'Support Commander Tab Complete (slow)'
        register:'Register global command'
        unregister:'Unregister global command'
    )

    _describe -t common-commands 'common commands' args && _ret=0
}

if (( ${#words} >= 3 )); then
    _qpro_args_comp_zh
else
    _qpro_main_zh
fi
